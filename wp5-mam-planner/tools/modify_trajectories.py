#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This script has to be used to modify the trajectories generated by the MamPlanner if needed.
# It can be used to apply offsets to the positions, velocities, accelerations and
# time_from_start of the trajectory points.
#
# The offsets are defined in the following variables:
# - positions_offset
# - velocities_offset
# - accelerations_offset
# - time_from_start_offset
#
# The script has to be called from the folder containing the trajectories to modify.
# It will modify all the .yaml files in the folder.
#
# Author: Louis Munier - <lmunier@protonmail.com>
# Date: 2025-01-29
# Version: 0.1
#
# copyright Copyright (c) 2025 - EPFL - LASA. All rights reserved.

import os
from ruamel.yaml import YAML

from math import pi

# Define the offsets
positions_offset = [2 * pi, 0, 0, 0, 0, 0]
velocities_offset = [0, 0, 0, 0, 0, 0]
accelerations_offset = [0, 0, 0, 0, 0, 0]
effort_offset = [0, 0, 0, 0, 0, 0]
time_from_start_offset = 0


def apply_offsets(data):
    for point in data:
        # Apply offsets to positions
        point["positions"] = [
            p + o for p, o in zip(point["positions"], positions_offset)
        ]

        # Apply offsets to velocities
        point["velocities"] = [
            v + o for v, o in zip(point["velocities"], velocities_offset)
        ]

        # Apply offsets to accelerations
        point["accelerations"] = [
            a + o for a, o in zip(point["accelerations"], accelerations_offset)
        ]

        # Apply offsets to effort
        point["effort"] = [e + o for e, o in zip(point["effort"], effort_offset)]

        # Apply offset to time_from_start
        point["time_from_start"] += time_from_start_offset


def process_file(filepath):
    yaml = YAML()
    yaml.preserve_quotes = True
    yaml.default_flow_style = True
    yaml.width = float("inf")

    with open(filepath, "r") as file:
        data = yaml.load(file)

    apply_offsets(data)

    with open(filepath, "w") as file:
        yaml.dump(data, file)


def process_folder(folder_path):
    for filename in os.listdir(folder_path):
        if filename.endswith(".yaml"):
            filepath = os.path.join(folder_path, filename)
            process_file(filepath)


if __name__ == "__main__":
    folder_path = "."
    process_folder(folder_path)
